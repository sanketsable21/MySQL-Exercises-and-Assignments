CREATE DATABASE CLASSES;

USE CLASSES;

-- ------------------------------------------------------------------TABLE 01------------------------------------------------------------------
CREATE TABLE STUDENTS (
    STUDENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    DATE_OF_BIRTH DATE,
    GENDER VARCHAR(10),
    EMAIL VARCHAR(100),
    PHONE_NUMBER VARCHAR(15)
);

DROP TABLE STUDENTS;

INSERT INTO STUDENTS (FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, EMAIL, PHONE_NUMBER) VALUES
('RAHUL', 'SHARMA', '2002-05-15', 'MALE', 'RAHUL.SHARMA@EMAIL.COM', '9876543210'),
('PRIYA', 'SINGH', '2001-08-22', 'FEMALE', 'PRIYA.SINGH@EMAIL.COM', '9876543211'),
('AMIT', 'KUMAR', '2003-02-10', 'MALE', 'AMIT.KUMAR@EMAIL.COM', '9876543212'),
('NEHA', 'GUPTA', '2000-12-05', 'FEMALE', 'NEHA.GUPTA@EMAIL.COM', '9876543213'),
('VIKAS', 'YADAV', '2002-07-18', 'MALE', 'VIKAS.YADAV@EMAIL.COM', '9876543214'),
('SNEHA', 'MEHTA', '2001-11-30', 'FEMALE', 'SNEHA.MEHTA@EMAIL.COM', '9876543215');

TRUNCATE STUDENTS;

SELECT * FROM STUDENTS;

SELECT FIRST_NAME, GENDER, PHONE_NUMBER FROM STUDENTS;

SELECT FIRST_NAME, LAST_NAME, GENDER, EMAIL 
FROM STUDENTS
WHERE LAST_NAME LIKE '%ING%'
UNION
SELECT FIRST_NAME, LAST_NAME, GENDER, EMAIL
FROM STUDENTS
WHERE FIRST_NAME LIKE '%IKA%';

-- ------------------------------------------------------------------TABLE 02------------------------------------------------------------------
CREATE TABLE TEACHERS (
    TEACHER_ID INT PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    SUBJECT VARCHAR(50),
    EMAIL VARCHAR(100),
    PHONE_NUMBER VARCHAR(15)
);

DROP TABLE TEACHERS;

INSERT INTO TEACHERS (FIRST_NAME, LAST_NAME, SUBJECT, EMAIL, PHONE_NUMBER) VALUES
('ARUN', 'VERMA', 'MATHEMATICS', 'ARUN.VERMA@EMAIL.COM', '9876543220'),
('SANGEETA', 'MISHRA', 'PHYSICS', 'SANGEETA.MISHRA@EMAIL.COM', '9876543221'),
('RAJESH', 'PATIL', 'CHEMISTRY', 'RAJESH.PATIL@EMAIL.COM', '9876543222'),
('KAVITA', 'SHARMA', 'BIOLOGY', 'KAVITA.SHARMA@EMAIL.COM', '9876543223'),
('ANIL', 'SAXENA', 'COMPUTER SCIENCE', 'ANIL.SAXENA@EMAIL.COM', '9876543224'),
('SUNITA', 'JOSHI', 'ENGLISH', 'SUNITA.JOSHI@EMAIL.COM', '9876543225');

TRUNCATE TEACHERS;

SELECT * FROM TEACHERS;

SELECT FIRST_NAME, SUBJECT, PHONE_NUMBER FROM TEACHERS;

SELECT FIRST_NAME,
	CASE
		WHEN LAST_NAME LIKE '%RM%' THEN '12000'
        WHEN LAST_NAME LIKE '%SHR%' THEN '13000'
        WHEN LAST_NAME LIKE '%TI%' THEN '14000'
        WHEN LAST_NAME LIKE '%XEN%' THEN '15000'
        ELSE '16000'
	END AS TEACHER_SALARY
FROM TEACHERS;
        
-- ------------------------------------------------------------------TABLE 03------------------------------------------------------------------
CREATE TABLE COURSES (
    COURSE_ID INT PRIMARY KEY AUTO_INCREMENT,
    COURSE_NAME VARCHAR(100),
    DESCRIPTION TEXT,
    DURATION INT,
    TEACHER_ID INT,
    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHERS(TEACHER_ID)
);

DROP TABLE COURSES;

INSERT INTO COURSES (COURSE_NAME, DESCRIPTION, DURATION, TEACHER_ID) VALUES
('MATHEMATICS', 'ADVANCED MATH COURSE', 6, 1),
('PHYSICS', 'BASIC PHYSICS COURSE', 6, 2),
('CHEMISTRY', 'ORGANIC AND INORGANIC CHEMISTRY', 6, 3),
('BIOLOGY', 'HUMAN AND PLANT BIOLOGY', 6, 4),
('COMPUTER SCIENCE', 'PROGRAMMING AND ALGORITHMS', 6, 5),
('ENGLISH', 'GRAMMAR AND LITERATURE', 6, 6);

TRUNCATE COURSES;

SELECT * FROM COURSES;

SELECT COURSE_NAME, DURATION FROM COURSES;

SELECT * FROM COURSES WHERE TEACHER_ID IN (3, 5);

-- ------------------------------------------------------------------TABLE 04------------------------------------------------------------------
CREATE TABLE CLASSES (
    CLASS_ID INT PRIMARY KEY AUTO_INCREMENT,
    CLASS_NAME VARCHAR(50),
    SECTION VARCHAR(10),
    TEACHER_ID INT,
    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHERS(TEACHER_ID)
);

DROP TABLE CLASSES;

INSERT INTO CLASSES (CLASS_NAME, SECTION, TEACHER_ID) VALUES
('CLASS 10', 'A', 1),
('CLASS 10', 'B', 2),
('CLASS 11', 'A', 3),
('CLASS 11', 'B', 4),
('CLASS 12', 'A', 5),
('CLASS 12', 'B', 6);

TRUNCATE CLASSES;

SELECT * FROM CLASSES;

SELECT * FROM CLASSES WHERE CLASS_NAME LIKE '%AS%';

SELECT * FROM CLASSES WHERE TEACHER_ID BETWEEN 2 AND 5;

SELECT * FROM CLASSES C
WHERE EXISTS( SELECT 1 FROM CLASSES WHERE SECTION = 'B' AND TEACHER_ID = C.TEACHER_ID );

CREATE TABLE CLASSES_SUMMARY AS
SELECT CLASS_ID, CLASS_NAME, SECTION, TEACHER_ID 
FROM CLASSES;

SELECT * FROM CLASSES_SUMMARY;

-- ------------------------------------------------------------------TABLE 05------------------------------------------------------------------
CREATE TABLE ENROLLMENTS (
    ENROLLMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_ID INT,
    COURSE_ID INT,
    ENROLLMENT_DATE DATE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

DROP TABLE ENROLLMENTS;

INSERT INTO ENROLLMENTS (STUDENT_ID, COURSE_ID, ENROLLMENT_DATE) VALUES
(1, 1, '2025-01-15'),
(2, 2, '2025-01-16'),
(3, 3, '2025-01-17'),
(4, 4, '2025-01-18'),
(5, 5, '2025-01-19'),
(6, 6, '2025-01-20');

TRUNCATE ENROLLMENTS;

SELECT * FROM ENROLLMENTS;

SELECT DISTINCT ENROLLMENT_DATE FROM ENROLLMENTS;

-- ------------------------------------------------------------------TABLE 06------------------------------------------------------------------
CREATE TABLE ATTENDANCE (
    ATTENDANCE_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_ID INT,
    CLASS_ID INT,
    DATE DATE,
    STATUS ENUM('PRESENT', 'ABSENT', 'LATE'),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASSES(CLASS_ID)
);

DROP TABLE ATTENDANCE;

INSERT INTO ATTENDANCE (STUDENT_ID, CLASS_ID, DATE, STATUS) VALUES
(1, 1, '2025-02-01', 'PRESENT'),
(2, 2, '2025-02-01', 'ABSENT'),
(3, 3, '2025-02-01', 'PRESENT'),
(4, 4, '2025-02-01', 'LATE'),
(5, 5, '2025-02-01', 'PRESENT'),
(6, 6, '2025-02-01', 'ABSENT');

TRUNCATE ATTENDANCE;

SELECT * FROM ATTENDANCE;

SELECT DISTINCT DATE, STATUS FROM ATTENDANCE;

-- ------------------------------------------------------------------TABLE 07------------------------------------------------------------------
CREATE TABLE EXAMS (
    EXAM_ID INT PRIMARY KEY AUTO_INCREMENT,
    COURSE_ID INT,
    EXAM_DATE DATE,
    TOTAL_MARKS INT,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(COURSE_ID)
);

DROP TABLE EXAMS;

INSERT INTO EXAMS (COURSE_ID, EXAM_DATE, TOTAL_MARKS) VALUES
(1, '2025-03-10', 100),
(2, '2025-03-12', 100),
(3, '2025-03-14', 100),
(4, '2025-03-16', 100),
(5, '2025-03-18', 100),
(6, '2025-03-20', 100);

TRUNCATE EXAMS;

SELECT * FROM EXAMS;

SELECT * FROM EXAMS WHERE EXAM_DATE > '2025-03-14';

-- ------------------------------------------------------------------TABLE 08------------------------------------------------------------------
CREATE TABLE RESULTS (
    RESULT_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_ID INT,
    EXAM_ID INT,
    OBTAINED_MARKS INT,
    GRADE VARCHAR(5),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID),
    FOREIGN KEY (EXAM_ID) REFERENCES EXAMS(EXAM_ID)
);

DROP TABLE RESULTS;

INSERT INTO RESULTS (STUDENT_ID, EXAM_ID, OBTAINED_MARKS, GRADE) VALUES
(1, 1, 85, 'A'),
(2, 2, 78, 'B'),
(3, 3, 90, 'A+'),
(4, 4, 65, 'C'),
(5, 5, 88, 'A'),
(6, 6, 72, 'B');

TRUNCATE RESULTS;

SELECT * FROM RESULTS;

SELECT * FROM RESULTS ORDER BY GRADE DESC;

-- ------------------------------------------------------------------TABLE 09------------------------------------------------------------------
CREATE TABLE FEES (
    FEE_ID INT PRIMARY KEY AUTO_INCREMENT,
    STUDENT_ID INT,
    AMOUNT DECIMAL(10,2),
    PAYMENT_DATE DATE,
    STATUS ENUM('PAID', 'PENDING'),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(STUDENT_ID)
);

DROP TABLE FEES;

INSERT INTO FEES (STUDENT_ID, AMOUNT, PAYMENT_DATE, STATUS) VALUES
(1, 5000, '2025-01-10', 'PAID'),
(2, 5200, '2025-01-12', 'PAID'),
(3, 4800, '2025-01-14', 'PENDING'),
(4, 5000, '2025-01-16', 'PAID'),
(5, 5300, '2025-01-18', 'PAID'),
(6, 5100, '2025-01-20', 'PENDING');

TRUNCATE FEES;

SELECT * FROM FEES;

SELECT COUNT(*) AS TOTAL_FEES FROM FEES;

SELECT * FROM FEES LIMIT 4 OFFSET 2;

-- ------------------------------------------------------------------TABLE 10------------------------------------------------------------------
CREATE TABLE LIBRARY (
    BOOK_ID INT PRIMARY KEY AUTO_INCREMENT,
    BOOK_NAME VARCHAR(100),
    AUTHOR VARCHAR(50),
    PUBLICATION_YEAR INT,
    AVAILABLE_COPIES INT
);

DROP TABLE LIBRARY;

INSERT INTO LIBRARY (BOOK_NAME, AUTHOR, PUBLICATION_YEAR, AVAILABLE_COPIES) VALUES
('MATHEMATICS FOR BEGINNERS', 'R.D. SHARMA', 2015, 3),
('PHYSICS CONCEPTS', 'H.C. VERMA', 2018, 4),
('CHEMISTRY BASICS', 'O.P. TANDON', 2016, 5),
('BIOLOGY GUIDE', 'PETER RAVEN', 2020, 2),
('COMPUTER SCIENCE INTRODUCTION', 'YASHWANT KANETKAR', 2017, 6),
('ENGLISH GRAMMAR', 'WREN & MARTIN', 2019, 3);

TRUNCATE LIBRARY;

SELECT * FROM LIBRARY;

SELECT BOOK_NAME, AVG (AVAILABLE_COPIES) AS AVERAGE_AVAILABLE_COPIES FROM LIBRARY GROUP BY BOOK_NAME;

SELECT AVG(AVAILABLE_COPIES) AS AVERAGE_AVAILABLE_COPIES FROM LIBRARY;